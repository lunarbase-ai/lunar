{
    "example_workflows_default": [
        {
            "task": "Create a workflow for uploading a local .tex file, compile the LaTeX file to a PDF file, and compress it to a ZIP file.",
            "description": "A workflow for uploading a local .tex file, then compiling the LaTeX file to a PDF file, and finally compressing it to a ZIP file.",
            "files": [
                {
                    "description": "The LaTeX file",
                    "path": "/Documents/latex_documents/my_latex_code.tex"
                }
            ],
            "answer_workflow_file": "latex_compiler_compressor.json"
        },
        {
            "task": "Create a workflow for uploading a PDF file and extracting its content. Then retrieve the contents of the results section, and create a report about it.",
            "description": "A workflow for uploading a PDF file and extracting its content. Then retrieve the contents of the results section, and create a report about it.",
            "answer_workflow_file": "report_pdf_results_section.json"
        },
        {
            "task": "Create a workflow that takes the path of a local text file as input, reads the file and outputs its content as a string. Then, search for the substring 'abc' in this string. Output 'Yes' if present, otherwise 'No'.",
            "description": "A workflow that takes the path of a local text file as input, reads the file and outputs its content as a string. Then, search for the substring 'abc' in this string. Output 'Yes' if present, otherwise 'No'.",
            "files": [
                {
                    "description": "The text file to search in",
                    "path": "/Documents/test_files/my_text_file.txt"
                }
            ],
            "answer_workflow_file": "file_substring_search.json"
        }
    ],
    "example_workflows_prompt_dependent": [
        {
            "task": "Create a workflow that extracts a zipped PDF file, reads the PDF file and summarizes the text content using an LLM.",
            "description": "Extracts a zipped PDF file, reads the PDF file and summarizes the text content using an LLM.",
            "answer_workflow_file": "zipped_pdf_to_llm_summary.json",
            "note": "Also used in modification"
        },
        {
            "task": "Create a workflow that reads a PDF file and outputs two things: a summary of the text content (using an LLM) and a report with the whole text content.",
            "description": "Reads a PDF file and outputs two things: a summary of the text content (using an LLM) and a report with the whole text content.",
            "answer_workflow_file": "pdf_to_llm_summary_and_report.json",
            "note": "Also used in modification"
        },
        {
            "task": "Generate a workflow that reads a file and creates a report of the content.",
            "description": "A workflow reading a file and creating a report of the content.",
            "answer_workflow_file": "file_reader_report.json",
            "note": "Also used in modification"
        },
        {
            "task": "Create a workflow that creates two new files containing a copy and a summary of an input file. Outputs the file names in a dict.",
            "description": "Creates two new files containing a copy and a summary of an input file. Outputs the file names in a dict.",
            "answer_workflow_file": "file_summary_copy_textinputs.json",
            "note": "Also used in modification"
        },
        {
            "task": "Create a workflow that reads a CSV file with a column \"gene_name\". Extracts the first gene name and reads the Wikipedia article about it. Outputs the first sentence of the article.",
            "description": "Reads a CSV file with a column \"gene_name\". Extracts the first gene name and reads the Wikipedia article about it. Outputs the first sentence of the article.",
            "answer_workflow_file": "gene_wikipedia.json",
            "note": "Also a test in the autoworkflow tests"
        },
        {
            "task": "Read a text file and find all urls mentioned in the text. Then take the shortest URL and output its HTML content.",
            "description": "Reads a text file and finds all urls mentioned in the text. Then takes the shortest URL and outputs its HTML content.",
            "answer_workflow_file": "find_shortest_url_file_scrape.json",
            "note": "Also a test in the autoworkflow tests"
        },
        {
            "task": "Create a workflow that reads a textfile with an English text and outputs its translation to French.",
            "description": "Reads a textfile with an English text and outputs its translation to French.",
            "answer_workflow_file": "english2french_file.json",
            "note": "Also a test in the autoworkflow tests. Contains some simple LLM prompt engineering (`Output only...`)"
        },
        {
            "task": "Create a workflow that retrieves financial data about Tesla (ticker: TSLA) and outputs a report.",
            "description": "Retrieves financial data about Tesla (ticker: TSLA) and outputs a report.",
            "answer_workflow_file": "yf2report.json",
            "note": "A demo workflow"
        },
        {
            "task": "Generate a workflow that reads a CSV file with IMDB movie ratings, creates Azure OpenAI vector embeddings, and stores the embeddings in a Milvus database.",
            "description": "Reads a CSV file with IMDB movie ratings, creates Azure OpenAI vector embeddings, and stores the embeddings in a Milvus database.",
            "answer_workflow_file": "csv2milvus.json",
            "note": "A demo workflow"
        },
        {
            "task": "Create a workflow that, in natuarl language, queries a Milvus database.",
            "description": "Queries, in natural language, a Milvus database.",
            "answer_workflow_file": "csv2milvus.json",
            "note": "A demo workflow"
        },
        {
            "task": "Create a workflow for uploading and reading an SQL database and then find out which artist recorded the music album Black Album.",
            "description": "Reads an SQL database and then finds out which artist recorded the music album Black Album.",
            "answer_workflow_file": "nl_sql.json",
            "note": "A demo workflow"
        },
        {
            "task": "Generate a workflow that reads a csv file with IMDB movie ratings and asks an LLM about the rating of 'The Astronomer's Dream'.",
            "description": "Reads a csv file with IMDB movie ratings and asks an LLM about the rating of 'The Astronomer's Dream'.",
            "answer_workflow_file": "csv_llm_quest.json",
            "note": "A demo workflow. Not a very good example for CSV Upload component."
        },
        {
            "task": "Create a workflow that extracts a mathematical expression from an image and evaluates it.",
            "description": "Extracts a mathematical expression from an image and evaluates it.",
            "answer_workflow_file": "math_expression_image.json",
            "note": "Also a test in the autoworkflow tests"
        },
        {
            "task": "Create a workflow that reads a JSON file containing a list of URLs. Output a list on Python format of the status codes when requesting each URL.",
            "description": "Reads a JSON file containing a list of URLs. Outputs a list on Python format of the status codes when requesting each URL.",
            "answer_workflow_file": "html_scrape_json_urls_status.json",
            "note": "Also a test in the autoworkflow tests"
        },
        {
            "task": "Generate a workflow that reads two PDFs and outputs the content of the one with shortest text.",
            "description": "Reads two PDFs and outputs the content of the one with shortest text.",
            "answer_workflow_file": "longest_pdf.json",
            "note": "Also a test in the autoworkflow tests"
        },
        {
            "task": "Create a workflow that reads a file and performs NER on it. Then extracts all found persons.",
            "description": "Reads a file and performs NER on it. Then extracts all found persons.",
            "answer_workflow_file": "ner_persons.json",
            "note": "Co-pilot managed to generate this correctly, but still included to have an NER example."
        },
        {
            "task": "Reads a function definition of f(x) from a file (on latex format '$f(x)=...$') and outputs the integral of f between 0..2 as an integer.",
            "description": "Reads a function definition of f(x) from a file (on latex format '$f(x)=...$') and outputs the integral of f between 0..2 as an integer.",
            "answer_workflow_file": "integral.json",
            "note": "Also a test in the autoworkflow tests. Not so important example, but fixes problem when returning SymPy integer instead of Python built-in integer."
        },
        {
            "task": "Create a workflow that reads an audio file and plays the sound.",
            "description": "Reads an audio file and plays the sound.",
            "answer_workflow_file": "audio_player.json"
        },
        {
            "task": "Create a workflow that generates the lyrics of a song about space exploration, let Suno generate songs of it, download the songs and output a dictionary with each Song ID mapped to the path of the downloaded file.",
            "description": "Generates the lyrics of a song about space exploration, lets Suno generate songs of it, downloads the songs and outputs a dictionary with each Song ID mapped to the path of the downloaded file.",
            "answer_workflow_file": "lyrics_suno_download.json"
        },
        {
            "task": "Create a workflow that adds two audio files as two separate tracks in a REAPER project, increase the volume of the first track with 50 %, and pan the second track 25 % left.",
            "description": "Adds two audio files as two separate tracks in a REAPER project, increases the volume of the first track with 50 %, and pans the second track 25 % left.",
            "answer_workflow_file": "reaper.json"
        },
        {
            "task": "Create a workflow that extracts the Arxiv paper 2006.04710, extracts the statements in it, and creates a dict with the statements.",
            "description": "Extracts the Arxiv paper 2006.04710, extracts the statements in it, and creates a dict with the statements.",
            "answer_workflow_file": "paper_extraction_db.json",
            "note": "This example could be improved by processing the outputted paper database JSON in some way, e.g. via a Property Getter."
        },
        {
            "task": "Create a workflow that queries `Great wall of China` to Wikidata and outputs the description in the first match.",
            "description": "Queries `Great wall of China` to Wikidata and outputs the description in the first match.",
            "answer_workflow_file": "wikidata_description.json"
        },
        {
            "task": "Create a workflow that demonstrates how to create and query a LlamaIndex index.",
            "description": "Demonstrates how to create and query a LlamaIndex index.",
            "answer_workflow_file": "llamaindex.json"
        }
    ],
    "example_workflow_modifications": [
        {
            "task": "Remove the ZIP extractor and the Python Coder, and add a report about the PDF text content besides the LLM summary.",
            "initial_workflow_file": "zipped_pdf_to_llm_summary.json",
            "answer_workflow_file": "pdf_to_llm_summary_and_report.json"
        },
        {
            "task": "Replace all hardcoded file names and variable names with values from text input components.",
            "initial_workflow_file": "file_summary_copy_hardcoded.json",
            "answer_workflow_file": "file_summary_copy_textinputs.json"
        },
        {
            "task": "Output the file content as a report.",
            "initial_workflow_file": "file_reader.json",
            "answer_workflow_file": "file_reader_report.json"
        }
    ],

    "example_components": [
        {
            "name": "PropertyGetter",
            "code": "def run(self, inputs, **kwargs):\n    {inputs_postprocess}\n    input_object = inputs[\"Input\"].value\n    selected_property_keys = inputs[\"Selected property\"].value.split(\",\")\n\n    selected_values = []\n    for selected_property_key in selected_property_keys:\n        parts = selected_property_key.split(\".\")\n        if len(parts) > 1:\n            value = input_object[parts[0]]\n            try:\n                for p in parts[1:]:\n                    value = value[p]\n            except KeyError:\n                raise ValueError(\n                    f\"The selected property path is invalid: {{selected_property_keys}}!\"\n                )\n            selected_values.append(value)\n\n        if parts[0] in input_object:\n            selected_values.append(input_object[parts[0]])\n        else:\n            raise ValueError(\n                \"The selected property doesn't exist in the input object!\"\n            )\n    if len(selected_values) == 1:\n        return selected_values[0]\n    return selected_values"
        },
        {
            "name": "PythonCoder",
            "code": "@staticmethod\ndef execute(code):\n    local_vars = {{}}\n    exec(code, local_vars)\n    return local_vars.get(\"result\", None)\n\ndef run(self, inputs, **kwargs):\n    {inputs_postprocess}\n    code = inputs[\"Code\"].value\n    try:\n        parse_ast(code.strip())\n    except SyntaxError as e:\n        raise e\n    code_out = PythonCoder.execute(code)\n\n    return code_out\n"
        },
        {
            "name": "FileMerger",
            "description": "Takes two server paths as input. Reads the file contents, add the contents together and saves the result as a new file. Outputs the path of the new file.\nInput (str, str): The two server paths of the two files to merge.\nOutput (str): The server path of the merged file.",
            "input_labels": ["File path 1", "File path 2"],
            "code": "def run(self, inputs, **kwargs):\n    {inputs_postprocess}\n    file_path_1 = inputs['File path 1'].value\n    file_path_2 = inputs['File path 2'].value\n\n    with open(file_path_1, 'r') as file1:\n        file1_contents = file1.read()\n\n    with open(file_path_2, 'r') as file2:\n        file2_contents = file2.read()\n\n    new_file_path = 'new_file.txt'\n    with open(new_file_path, 'w') as new_file:\n        new_file.write(file1_contents + file2_contents)\n\n    return new_file_path"
        }
    ],
    "example_relevant_components": [
        {
            "description": "Create a workflow for uploading a PDF file and extracting its content. Then retrieve the contents of the results section, and create a report about it.",
            "answer": "UploadComponent, PDFExtractor, Report, PythonCoder, PropertyGetter"
        },
        {
            "description": "A workflow that takes the path of a local text file as input, reads the file and outputs 'Yes' if the substring 'abc' if present, otherwise 'No'.",
            "answer": "UploadComponent, PythonCoder"
        },
        {
            "description": "Generate a workflow reading stock tickers from a CSV file. Download financial data about the companies and use an LLM to write a summary of the financial situation of the companies.",
            "answer": "YahooFinanceAPI, CsvExtractor, PythonCoder, AzureOpenAIPrompt, OpenAIPrompt, GeminiAIPrompt, LLMPrompt, UploadComponent"
        }
    ]
}