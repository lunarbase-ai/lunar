{
    "id": "c4ca7a37-e7bc-4f29-ad82-f9f4f4a2c6a9",
    "userId": "si5126lj-s@student.lu.se",
    "name": "Math Expression Image Evaluator",
    "description": "Extracts a math expression from an image and outputs its answer.",
    "version": null,
    "components": [
      {
        "id": "36d7b013-47ba-4bbc-b2d9-830015ddbf0d",
        "workflowId": "c4ca7a37-e7bc-4f29-ad82-f9f4f4a2c6a9",
        "name": "File Upload",
        "className": "UploadComponent",
        "description": "Uploads local files to the server.\n    Input (str): A string of the local path of the local file to upload to the server. If needed, tha local path can be inputted manually by the user.\n    Output (str): A string of the server path of the uploaded file.",
        "group": "Input",
        "inputs": [
          {
            "key": "Input file",
            "dataType": "FILE",
            "value": {
              "path": "/Documents/math/images/math_expression.png",
              "name": "file",
              "type": null,
              "size": null,
              "preview": null,
              "description": null
            },
            "templateVariables": {},
            "componentId": "b901d4a5-3217-4923-8222-c3bdd607b1a8"
          }
        ],
        "output": {
          "dataType": "TEXT",
          "value": ":undef:"
        },
        "label": "COMPONENT1",
        "configuration": {
          "force_run": false
        },
        "version": null,
        "isCustom": false,
        "isTerminal": false,
        "position": {
          "x": 0,
          "y": 0
        },
        "timeout": 600,
        "componentCode": "upload/upload/__init__.py",
        "componentCodeRequirements": [],
        "componentExamplePath": null,
        "invalidErrors": []
      },
      {
        "id": "147d277f-e668-41e2-81fc-2c5f38c9813f",
        "workflowId": "c4ca7a37-e7bc-4f29-ad82-f9f4f4a2c6a9",
        "name": "Picture Extractor",
        "className": "Pic2Text",
        "description": "Extracts text and math formulas from a picture. The math formulas are outputted in LaTeX style (eg.: `$$f(x)=3 \\cdot x^2$$`).\nInput:\n  `path` (str): A string of the server path of the image to read.\nOutput (str): A string of the text and the math formulas in the image.",
        "group": "DATA_EXTRACTION",
        "inputs": [
          {
            "key": "File path",
            "dataType": "TEXT",
            "value": ":undef:",
            "templateVariables": {},
            "componentId": "2c462b95-aa53-4afa-a6e3-c55de36fda2f"
          }
        ],
        "output": {
          "dataType": "TEXT",
          "value": ":undef:"
        },
        "label": "COMPONENT2",
        "configuration": {
          "force_run": false
        },
        "version": null,
        "isCustom": false,
        "isTerminal": false,
        "position": {
          "x": 450,
          "y": 0
        },
        "timeout": 600,
        "componentCode": "pic2text/pic2text/__init__.py",
        "componentCodeRequirements": [
          "pix2text"
        ],
        "componentExamplePath": "pic2text/pic2text/example.json",
        "invalidErrors": []
      },
      {
        "id": "da7f1eeb-770c-44ec-ba9a-df80784f4a9c",
        "workflowId": "c4ca7a37-e7bc-4f29-ad82-f9f4f4a2c6a9",
        "name": "Python coder",
        "className": "PythonCoder",
        "description": "Performs customized Python code execution. Outputs the value that the Python variable `result` is set to during the execution of the Python code.\nInputs:\n  `Code` (str): A string of the Python code to execute.  If needed, the Python code can be inputted manually by the user.\nOutput (Any): The value of the variable `result` in the Python code after execution.",
        "group": "Coders",
        "inputs": [
          {
            "key": "Code",
            "dataType": "CODE",
            "value": "from sympy import sympify\nfrom sympy.parsing.latex import parse_latex\n\ndef evaluate_latex_expression(latex_expression):\n    # Step 1: Remove LaTeX delimiters\n    expression = latex_expression.strip('$')\n\n    # Step 2: Parse LaTeX into a SymPy expression\n    sympy_expr = parse_latex(expression)\n\n    # Step 3: Evaluate the expression\n    result = sympify(sympy_expr)\n\n    # Step 4: Convert value to decimal form (from a form with fractions, e.g. `'3+1/2' --> 3.500000000`)\n    result = result.evalf()\n\n    return result\n\nlatex_expression = \"\"\"{latex_expression}\"\"\"\nresult = evaluate_latex_expression(latex_expression)",
            "templateVariables": {
              "Code.latex_expression": ":undef:"
            },
            "componentId": "f5ced17f-95de-4424-880f-9e0420afc756"
          }
        ],
        "output": {
          "dataType": "ANY",
          "value": ":undef:"
        },
        "label": "COMPONENT3",
        "configuration": {
          "force_run": false,
          "openai_api_key": "",
          "openai_api_base": ""
        },
        "version": null,
        "isCustom": false,
        "isTerminal": true,
        "position": {
          "x": 900,
          "y": -5
        },
        "timeout": 600,
        "componentCode": "python_coder/python_coder/__init__.py",
        "componentCodeRequirements": [],
        "componentExamplePath": "python_coder/python_coder/example.json",
        "invalidErrors": []
      }
    ],
    "dependencies": [
      {
        "componentInputKey": "File path",
        "sourceLabel": "COMPONENT1",
        "targetLabel": "COMPONENT2",
        "templateVariableKey": null
      },
      {
        "componentInputKey": "Code",
        "sourceLabel": "COMPONENT2",
        "targetLabel": "COMPONENT3",
        "templateVariableKey": "Code.latex_expression"
      }
    ],
    "timeout": 3600,
    "autoComponentSpacing": {
      "dx": 450.0,
      "dy": 350.0,
      "x0": 0.0,
      "y0": 0.0
    },
    "invalidErrors": []
}