import uuid
from lunarbase.modeling.data_models import WorkflowModel
import pytest
import os
from pathlib import Path
from lunarbase.domains.workflow.controllers.workflow_controller import WorkflowController
from unittest.mock import MagicMock

@pytest.fixture
def mock_agent_copilot():
    mock = MagicMock()
    # Return a simple WorkflowModel for any call to generate_workflow
    mock.generate_workflow.return_value = WorkflowModel(
        name="Mocked Workflow",
        description="Generated by mock",
        id=str(uuid.uuid4()),
    )
    mock.modify_workflow.return_value = WorkflowModel(
        name="Modified Workflow",
        description="Modified by mock",
        id=str(uuid.uuid4()),
    )
    return mock

@pytest.fixture
def mock_workflow_search_index():
    mock = MagicMock()
    # The index method does nothing, just a stub
    mock.index.return_value = None
    mock.remove_document.return_value = None
    return mock

@pytest.fixture
def controller(lunar_context,mock_agent_copilot,mock_workflow_search_index):
    return WorkflowController(
        config=lunar_context.lunar_config,
        lunar_registry=lunar_context.lunar_registry,
        workflow_repository=lunar_context.workflow_repository,
        agent_copilot=mock_agent_copilot,
        workflow_search_index=mock_workflow_search_index,
        persistence_layer=lunar_context.persistence_layer,
    )

class TestTmpSave:
    def test_returns_temporary_saved_workflow(self, controller, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        workflow = WorkflowModel(
            name="Test Workflow",
            description="A test workflow",
            id=str(uuid.uuid4()),
        )
        saved_workflow = controller.tmp_save(workflow, user_id)
        assert saved_workflow.id == workflow.id
        assert saved_workflow.name == workflow.name
        assert saved_workflow.description == workflow.description
    

    def test_saves_workflow_in_tmp_path(self, controller, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        workflow = WorkflowModel(
            name="Test Workflow",
            description="A test workflow",
            id=str(uuid.uuid4()),
        )
        controller.tmp_save(workflow, user_id)

        path = Path(config.USER_DATA_PATH, user_id, config.TMP_PATH, f"{workflow.id}.json")

        assert path.exists()

class TestTmpDelete:
    def test_deletes_temporary_saved_workflow(self, controller, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        workflow = WorkflowModel(
            name="Test Workflow",
            description="A test workflow",
            id=str(uuid.uuid4()),
        )
        path = Path(config.USER_DATA_PATH, user_id, config.TMP_PATH, f"{workflow.id}.json")
        controller.tmp_save(workflow, user_id)

        assert path.exists()

        assert controller.tmp_delete(workflow.id, user_id)

        assert not path.exists()

class TestSave:
    def test_saves_workflow(self, controller, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        workflow = WorkflowModel(
            name="Test Workflow",
            description="A test workflow",
            id=str(uuid.uuid4()),  
        )
        saved_workflow = controller.save(workflow, user_id)
        assert saved_workflow.id == workflow.id
        assert saved_workflow.name == workflow.name
        assert saved_workflow.description == workflow.description

    def test_saves_default_workflow_if_none_provided(self, controller, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        saved_workflow = controller.save(None, user_id)
        assert saved_workflow.id is not None
        assert saved_workflow.name == "Untitled"
        assert saved_workflow.description == ""

    def test_initializes_workflow_dirs(self, controller, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        workflow = WorkflowModel(
            name="Test Workflow",
            description="A test workflow",
            id=str(uuid.uuid4()),  
        )
        controller.save(workflow, user_id)

        workflow_root_path = Path(
            config.USER_DATA_PATH,
            user_id,
            config.USER_WORKFLOW_ROOT,
            workflow.id,
        )
        workflow_venv_path = Path(
            workflow_root_path,
            config.USER_WORKFLOW_VENV_ROOT,
        )
        workflow_files_path = Path(
            workflow_root_path,
            config.FILES_PATH,
        )
        workflow_reports_path = Path(
            workflow_root_path,
            config.REPORT_PATH,
        )
        assert workflow_root_path.exists()
        assert workflow_venv_path.exists()
        assert workflow_files_path.exists()
        assert workflow_reports_path.exists()


class TestAutoCreate:
    def test_auto_create_uses_agent_copilot(self, controller, mock_agent_copilot, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        intent = "Create a workflow for data processing"
        workflow = controller.auto_create(intent, user_id)

        mock_agent_copilot.generate_workflow.assert_called_once_with(intent)

        assert workflow.name == mock_agent_copilot.generate_workflow.return_value.name
        assert workflow.description == mock_agent_copilot.generate_workflow.return_value.description
        assert workflow.id == mock_agent_copilot.generate_workflow.return_value.id

class TestAutoModify:
    def test_auto_modify_uses_agent_copilot(self, controller, mock_agent_copilot, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        workflow = WorkflowModel(
            name="Test Workflow",
            description="A test workflow",  
            id=str(uuid.uuid4()),
        )
        intent = "Modify the workflow"
        modified_workflow = controller.auto_modify(workflow, intent, user_id)

        mock_agent_copilot.modify_workflow.assert_called_once_with(workflow, intent)

        assert modified_workflow.name == mock_agent_copilot.modify_workflow.return_value.name
        assert modified_workflow.description == mock_agent_copilot.modify_workflow.return_value.description
        assert modified_workflow.id == mock_agent_copilot.modify_workflow.return_value.id

class TestUpdate:
    def test_updates_workflow(self, controller, mock_workflow_search_index, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        workflow = WorkflowModel(
            name="Test Workflow",
            description="A test workflow",
            id=str(uuid.uuid4()),
        )
        controller.save(workflow, user_id)

        updated_workflow = WorkflowModel(   
            name="Updated Workflow",
            description="Updated workflow",
            id=workflow.id,
        )

        resulted_workflow = controller.update(updated_workflow, user_id)

        mock_workflow_search_index.remove_document.assert_called_once_with(workflow.id, user_id)

        assert resulted_workflow.id == updated_workflow.id
        assert resulted_workflow.name == updated_workflow.name
        assert resulted_workflow.description == updated_workflow.description

class TestListAll:
    def test_lists_all_workflows(self, controller, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        workflow = WorkflowModel(
            name="Test Workflow",
            description="A test workflow",
            id=str(uuid.uuid4()),
        )

        workflow2 = WorkflowModel(
            name="Test Workflow 2",
            description="A test workflow 2",
            id=str(uuid.uuid4()),
        )
        controller.save(workflow, user_id)
        controller.save(workflow2, user_id)

        workflows = controller.list_all(user_id)
        assert len(workflows) == 2

        result_ids = [w.id for w in workflows]
        assert workflow.id in result_ids
        assert workflow2.id in result_ids

class TestListShort:
    def test_lists_short_workflows(self, controller, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        workflow = WorkflowModel(
            name="Test Workflow",
            description="A test workflow",
            id=str(uuid.uuid4()),
        )
        controller.save(workflow, user_id)

        workflows = controller.list_short(user_id)

        assert len(workflows) == 1
        assert workflows[0].id == workflow.id
        assert workflows[0].name == workflow.name
        assert workflows[0].description == workflow.description

class TestGetById:
    def test_gets_workflow_by_id(self, controller, config):
        user_id = config.DEFAULT_USER_TEST_PROFILE
        workflow = WorkflowModel(
            name="Test Workflow",
            description="A test workflow",
            id=str(uuid.uuid4()),
        )
        controller.save(workflow, user_id)

        resulted_workflow = controller.get_by_id(workflow.id, user_id)

        assert resulted_workflow.id == workflow.id
        assert resulted_workflow.name == workflow.name
        assert resulted_workflow.description == workflow.description
    