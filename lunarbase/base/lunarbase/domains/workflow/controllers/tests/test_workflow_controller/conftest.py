#  SPDX-FileCopyrightText: Copyright Â© 2024 Lunarbase (https://lunarbase.ai/) <contact@lunarbase.ai>
#  #
#  SPDX-License-Identifier: GPL-3.0-or-later
import uuid
from lunarbase.modeling.data_models import WorkflowModel
import pytest
from unittest.mock import MagicMock
from lunarbase.persistence.connections import LocalFilesStorageConnection
from lunarbase.persistence.resolvers import LocalFilesPathResolver
from lunarbase.domains.workflow.controllers.workflow_controller import WorkflowController

@pytest.fixture
def mock_agent_copilot():
    mock = MagicMock()
    # Return a simple WorkflowModel for any call to generate_workflow
    mock.generate_workflow.return_value = WorkflowModel(
        name="Mocked Workflow",
        description="Generated by mock",
        id=str(uuid.uuid4()),
    )
    mock.modify_workflow.return_value = WorkflowModel(
        name="Modified Workflow",
        description="Modified by mock",
        id=str(uuid.uuid4()),
    )
    return mock

@pytest.fixture
def mock_workflow_search_index():
    mock = MagicMock()
    # The index method does nothing, just a stub
    mock.index.return_value = None
    mock.remove_document.return_value = None
    mock.search.return_value = [{"id": "1", "name": "Test Workflow"}]
    return mock

@pytest.fixture
def connection(config):
    return LocalFilesStorageConnection(config)

@pytest.fixture
def path_resolver(config, connection):
    return LocalFilesPathResolver(connection, config)

@pytest.fixture
def controller(lunar_context, mock_agent_copilot, mock_workflow_search_index, path_resolver):
    return WorkflowController(
        config=lunar_context.lunar_config,
        lunar_registry=lunar_context.lunar_registry,
        workflow_repository=lunar_context.workflow_repository,
        agent_copilot=mock_agent_copilot,
        workflow_search_index=mock_workflow_search_index,
        persistence_layer=lunar_context.persistence_layer,
        path_resolver=path_resolver
    ) 