{
  "id": "cc7f42f5-050d-4ef4-af12-57f423706c50",
  "name": "File Content Substring Searcher",
  "description": "A workflow that takes the path of a local text file as input, reads the file and outputs its content as a string. Then, search for the substring 'abc' in this string. Output 'Yes' if present, otherwise 'No'.",
  "version": null,
  "components": [
    {
      "id": "03be9b66-02ab-4d79-8f40-c8c43edd88d8",
      "workflowId": "cc7f42f5-050d-4ef4-af12-57f423706c50",
      "name": "File Upload",
      "className": "UploadComponent",
      "description": "Uploads local files to the server.\n    Input (str): A string of the local path of the local file to upload to the server. If needed, tha local path can be inputted manually by the user.\n    Output (str): A string of the server path of the uploaded file.",
      "group": null,
      "inputs": [
        {
          "key": "input_file",
          "dataType": "FILE",
          "value": {
            "path": "/Documents/test_files/my_text_file.txt",
            "name": "my_text_file.txt",
            "type": null,
            "size": null,
            "preview": null,
            "description": null
          },
          "templateVariables": {},
          "componentId": "231491b3-5b7c-4966-8f50-f14005aea76c"
        }
      ],
      "output": {
        "dataType": "TEXT",
        "value": ":undef:"
      },
      "label": "COMPONENT1",
      "configuration": {
        "force_run": false
      },
      "version": null,
      "isCustom": false,
      "isTerminal": false,
      "position": {
        "x": 0,
        "y": 0
      },
      "timeout": 600,
      "componentCode": "upload/upload/__init__.py",
      "componentCodeRequirements": [],
      "componentExamplePath": "upload/upload/example.json",
      "invalidErrors": []
    },
    {
      "id": "52be4475-7f30-4aa1-b2fd-d7ccc84d8f78",
      "workflowId": "cc7f42f5-050d-4ef4-af12-57f423706c50",
      "name": "FileReader",
      "className": "Custom",
      "description": "Takes a server path of a file as input and reads it. Outputs the content as a string.    \nInput (str): The server path of the file to read.    \nOutput (str): The content of the file.",
      "group": null,
      "inputs": [
        {
          "key": "File path",
          "dataType": "ANY",
          "value": ":undef:",
          "templateVariables": {},
          "componentId": null
        }
      ],
      "output": {
        "dataType": "ANY",
        "value": ":undef:"
      },
      "label": "COMPONENT2",
      "configuration": {},
      "version": null,
      "isCustom": true,
      "isTerminal": false,
      "position": {
        "x": 450,
        "y": 0
      },
      "timeout": 600,
      "componentCode": "def run(self, inputs, **kwargs):\n    inputs = {input_component.key: input_component for input_component in (inputs if type(inputs) is list else [inputs])}\n    file_path = inputs['File path'].value\n\n    with open(file_path, 'r') as file:\n        file_contents = file.read()\n\n    return file_contents\n",
      "componentCodeRequirements": [],
      "componentExamplePath": null,
      "invalidErrors": []
    },
    {
      "id": "d56507c7-56ae-47c0-9683-39aaaa116e9a",
      "workflowId": "cc7f42f5-050d-4ef4-af12-57f423706c50",
      "name": "Python coder",
      "className": "PythonCoder",
      "description": "Performs customized Python code execution. Outputs the value that the Python variable `result` is set to during the execution of the Python code.\nInputs:\n  `Code` (str): A string of the Python code to execute.  If needed, the Python code can be inputted manually by the user.\nOutput (Any): The value of the variable `result` in the Python code after execution.",
      "group": "Coders",
      "inputs": [
        {
          "key": "code",
          "dataType": "CODE",
          "value": "s = \"\"\"{input_str}\"\"\"\nsubstr = \"\"\"{search_substr}\"\"\"\nif substr in s:\n    result = 'Yes'\nelse:\n    result = 'No'",
          "templateVariables": {
            "Code.search_substr": "abc",
            "Code.input_str": ""
          },
          "componentId": "256eef36-791e-4dc6-914a-f62f9ef8a33d"
        }
      ],
      "output": {
        "dataType": "ANY",
        "value": ":undef:"
      },
      "label": "COMPONENT3",
      "configuration": {
        "force_run": false,
        "openai_api_key": "",
        "openai_api_base": ""
      },
      "version": null,
      "isCustom": false,
      "isTerminal": true,
      "position": {
        "x": 900,
        "y": 0
      },
      "timeout": 600,
      "componentCode": "python_coder/python_coder/__init__.py",
      "componentCodeRequirements": [],
      "componentExamplePath": "python_coder/python_coder/example.json",
      "invalidErrors": []
    }
  ],
  "dependencies": [
    {
      "componentInputKey": "File path",
      "sourceLabel": "COMPONENT1",
      "targetLabel": "COMPONENT2",
      "templateVariableKey": null
    },
    {
      "componentInputKey": "Code",
      "sourceLabel": "COMPONENT2",
      "targetLabel": "COMPONENT3",
      "templateVariableKey": "Code.input_str"
    }
  ],
  "timeout": 3600,
  "autoComponentSpacing": {
    "dx": 450.0,
    "dy": 350.0,
    "x0": 0.0,
    "y0": 0.0
  },
  "invalidErrors": []
}